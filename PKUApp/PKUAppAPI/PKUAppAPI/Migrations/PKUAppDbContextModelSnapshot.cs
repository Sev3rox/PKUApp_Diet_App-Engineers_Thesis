// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PKUAppAPI.Data;

namespace PKUAppAPI.Migrations
{
    [DbContext(typeof(PKUAppDbContext))]
    partial class PKUAppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PKUAppAPI.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ExerciseId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("PKUAppAPI.Models.Meal", b =>
                {
                    b.Property<int>("MealId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MealId");

                    b.HasIndex("UserId");

                    b.ToTable("Meals");
                });

            modelBuilder.Entity("PKUAppAPI.Models.MealProduct", b =>
                {
                    b.Property<int>("MealId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("MealId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("MealProducts");
                });

            modelBuilder.Entity("PKUAppAPI.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("Carb")
                        .HasColumnType("int");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Fat")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phe")
                        .HasColumnType("int");

                    b.Property<int>("Protein")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PKUAppAPI.Models.TrackedValue", b =>
                {
                    b.Property<int>("TrackedValueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("TrackedValueId");

                    b.HasIndex("Type");

                    b.HasIndex("UserId");

                    b.ToTable("TrackedValues");
                });

            modelBuilder.Entity("PKUAppAPI.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "fc47a809-0a95-4219-a1e4-a1a6691fd062",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e7ff9acf-8f25-4e37-b77f-ac8d5867c921",
                            Email = "a@a",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Admin",
                            NormalizedEmail = "A@A",
                            NormalizedUserName = "A@A",
                            PasswordHash = "AQAAAAEAACcQAAAAENawFML/bfclXH5AH3nPlW0R/pnHadOGDFZ7rfi8z1MalUiCc+VaxU2l+TDytBw3DQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03036ae8-1945-4266-ab85-589409a61dbe",
                            TwoFactorEnabled = false,
                            UserName = "a@a"
                        },
                        new
                        {
                            Id = "f0fbf0b4-2ee5-4790-b08f-65f729ded115",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5229f7e2-5b24-42a6-9834-f0f130e6e821",
                            Email = "u@u",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "User",
                            NormalizedEmail = "U@U",
                            NormalizedUserName = "U@U",
                            PasswordHash = "AQAAAAEAACcQAAAAEGeVbjSxGWedmIaDQexL0Z0qpqRPSEf71JQsADyfIXIuCiDi/ifkOtArzFzpF/KSyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e11176c2-5af6-433b-bed0-f66ca4596042",
                            TwoFactorEnabled = false,
                            UserName = "u@u"
                        },
                        new
                        {
                            Id = "cba2cac7-a12a-4d3f-acfb-01fd62278377",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0356bfe3-0d61-4f8e-9155-fd2aa0c492d0",
                            Email = "u@u2",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "User2",
                            NormalizedEmail = "U@U2",
                            NormalizedUserName = "U@U2",
                            PasswordHash = "AQAAAAEAACcQAAAAEFxee2kU0Sj9Z3+JZIFeO4gzJPO0scYhuRTkQWiWNK8YJbEIjtW/C6KP+dpHZWvIVg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f78a5b7d-20c3-4a53-801c-65b6605cc8f3",
                            TwoFactorEnabled = false,
                            UserName = "u@u2"
                        },
                        new
                        {
                            Id = "c30785a5-5dd4-4303-b6ee-f21e154679eb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "71cc0e1e-b5ca-4983-9f51-b9b1400a5e3f",
                            Email = "u@u3",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "User3",
                            NormalizedEmail = "U@U3",
                            NormalizedUserName = "U@U3",
                            PasswordHash = "AQAAAAEAACcQAAAAEMQwMHy+HNeE2zpyfloUivtumSh1cHZwpDAELWxu880yB9Z8clZpKVGuKESi09G8lg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7cb0fe19-38ce-4ed0-ac3d-40f956c79393",
                            TwoFactorEnabled = false,
                            UserName = "u@u3"
                        });
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserDailyLimits", b =>
                {
                    b.Property<int>("UserDailyLimitsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("AddCalories")
                        .HasColumnType("bit");

                    b.Property<int>("CaloriesLimit")
                        .HasColumnType("int");

                    b.Property<int>("CarbLimit")
                        .HasColumnType("int");

                    b.Property<int>("FatLimit")
                        .HasColumnType("int");

                    b.Property<int>("PheLimit")
                        .HasColumnType("int");

                    b.Property<int>("ProteinLimit")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserDailyLimitsId");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("UserDailyLimits");

                    b.HasData(
                        new
                        {
                            UserDailyLimitsId = 1,
                            AddCalories = false,
                            CaloriesLimit = 0,
                            CarbLimit = 0,
                            FatLimit = 0,
                            PheLimit = 0,
                            ProteinLimit = 0,
                            UserId = "f0fbf0b4-2ee5-4790-b08f-65f729ded115"
                        },
                        new
                        {
                            UserDailyLimitsId = 2,
                            AddCalories = false,
                            CaloriesLimit = 0,
                            CarbLimit = 0,
                            FatLimit = 0,
                            PheLimit = 0,
                            ProteinLimit = 0,
                            UserId = "cba2cac7-a12a-4d3f-acfb-01fd62278377"
                        },
                        new
                        {
                            UserDailyLimitsId = 3,
                            AddCalories = false,
                            CaloriesLimit = 0,
                            CarbLimit = 0,
                            FatLimit = 0,
                            PheLimit = 0,
                            ProteinLimit = 0,
                            UserId = "c30785a5-5dd4-4303-b6ee-f21e154679eb"
                        });
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserExercise", b =>
                {
                    b.Property<int>("UserExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserExerciseId");

                    b.HasIndex("ExerciseId");

                    b.HasIndex("UserId");

                    b.ToTable("UserExercises");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserMedicine", b =>
                {
                    b.Property<int>("UserMedicineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Calories")
                        .HasColumnType("int");

                    b.Property<int>("Carb")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Fat")
                        .HasColumnType("int");

                    b.Property<int>("Phe")
                        .HasColumnType("int");

                    b.Property<int>("Protein")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserMedicineId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMedicines");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserOffAlert", b =>
                {
                    b.Property<int>("UserOffAlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserOffAlertId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOffAlerts");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserProductDish", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserProductDish");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserProductFav", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserProductFavs");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserProductLastAdded", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UserProductLastAddeds");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PKUAppAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PKUAppAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PKUAppAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PKUAppAPI.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PKUAppAPI.Models.Meal", b =>
                {
                    b.HasOne("PKUAppAPI.Models.User", "User")
                        .WithMany("Meals")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PKUAppAPI.Models.MealProduct", b =>
                {
                    b.HasOne("PKUAppAPI.Models.Meal", "Meal")
                        .WithMany("MealProducts")
                        .HasForeignKey("MealId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PKUAppAPI.Models.Product", "Product")
                        .WithMany("MealProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Meal");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("PKUAppAPI.Models.Product", b =>
                {
                    b.HasOne("PKUAppAPI.Models.User", "User")
                        .WithMany("Products")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PKUAppAPI.Models.TrackedValue", b =>
                {
                    b.HasOne("PKUAppAPI.Models.User", "User")
                        .WithMany("TrackedValues")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserDailyLimits", b =>
                {
                    b.HasOne("PKUAppAPI.Models.User", "User")
                        .WithOne("DailyLimits")
                        .HasForeignKey("PKUAppAPI.Models.UserDailyLimits", "UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserExercise", b =>
                {
                    b.HasOne("PKUAppAPI.Models.Exercise", "Exercise")
                        .WithMany("UserExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PKUAppAPI.Models.User", "User")
                        .WithMany("UserExercises")
                        .HasForeignKey("UserId");

                    b.Navigation("Exercise");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserMedicine", b =>
                {
                    b.HasOne("PKUAppAPI.Models.User", "User")
                        .WithMany("UserMedicines")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserOffAlert", b =>
                {
                    b.HasOne("PKUAppAPI.Models.User", "User")
                        .WithMany("UserOffAlerts")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserProductDish", b =>
                {
                    b.HasOne("PKUAppAPI.Models.Product", "Product")
                        .WithMany("UserProductDish")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PKUAppAPI.Models.User", "User")
                        .WithMany("UserProductDish")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserProductFav", b =>
                {
                    b.HasOne("PKUAppAPI.Models.Product", "Product")
                        .WithMany("UserProductFavs")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PKUAppAPI.Models.User", "User")
                        .WithMany("UserProductFavs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PKUAppAPI.Models.UserProductLastAdded", b =>
                {
                    b.HasOne("PKUAppAPI.Models.Product", "Product")
                        .WithMany("UserProductLastAddeds")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PKUAppAPI.Models.User", "User")
                        .WithMany("UserProductLastAddeds")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PKUAppAPI.Models.Exercise", b =>
                {
                    b.Navigation("UserExercises");
                });

            modelBuilder.Entity("PKUAppAPI.Models.Meal", b =>
                {
                    b.Navigation("MealProducts");
                });

            modelBuilder.Entity("PKUAppAPI.Models.Product", b =>
                {
                    b.Navigation("MealProducts");

                    b.Navigation("UserProductDish");

                    b.Navigation("UserProductFavs");

                    b.Navigation("UserProductLastAddeds");
                });

            modelBuilder.Entity("PKUAppAPI.Models.User", b =>
                {
                    b.Navigation("DailyLimits");

                    b.Navigation("Meals");

                    b.Navigation("Products");

                    b.Navigation("TrackedValues");

                    b.Navigation("UserExercises");

                    b.Navigation("UserMedicines");

                    b.Navigation("UserOffAlerts");

                    b.Navigation("UserProductDish");

                    b.Navigation("UserProductFavs");

                    b.Navigation("UserProductLastAddeds");
                });
#pragma warning restore 612, 618
        }
    }
}
